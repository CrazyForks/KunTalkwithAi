package com.example.everytalk.ui.components

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.horizontalScroll
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.selection.SelectionContainer
import androidx.compose.foundation.verticalScroll
import androidx.compose.foundation.gestures.detectHorizontalDragGestures
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ContentCopy
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalClipboardManager
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import android.widget.Toast

/**
 * ‰ª£Á†ÅÂùóÁªÑ‰ª∂ÔºàËá™ÂÆö‰πâÊ†∑ÂºèÔºâ
 * - Ëá™ÈÄÇÂ∫îÊªöÂä®Á≠ñÁï•ÔºàÁü≠‰ª£Á†ÅÊç¢Ë°åÔºåÈïø‰ª£Á†ÅÊ∞¥Âπ≥ÊªöÂä®Ôºâ
 * - ÊîØÊåÅÊ∞¥Âπ≥/ÂûÇÁõ¥ÂèåÂêëÊªöÂä®
 * - È°∂ÈÉ®Âè≥‰æß"Â§çÂà∂"ÊåâÈíÆ
 * - ÈÄÇÈÖçÊòéÊöó‰∏ªÈ¢ò
 * - ÊâãÂäøÂÜ≤Á™ÅËß£ÂÜ≥
 */
@Composable
fun CodeBlock(
    code: String,
    language: String?,
    textColor: Color,
    modifier: Modifier = Modifier,
    maxHeight: Int = 300,
    cornerRadius: Int = 10,
    enableHorizontalScroll: Boolean = true, // üéØ Êñ∞Â¢ûÔºöÊòØÂê¶ÂêØÁî®Ê∞¥Âπ≥ÊªöÂä®
    onScrollingStateChanged: (Boolean) -> Unit = {} // üéØ Êñ∞Â¢ûÔºöÊªöÂä®Áä∂ÊÄÅÂõûË∞É
) {
    val isDark = isSystemInDarkTheme()
    val codeColor = if (isDark) Color(0xFFD4D4D4) else Color(0xFF24292F)
    val topBarColor = if (isDark) Color.White else Color(0xFF24292F)

    val vScroll = rememberScrollState()
    val hScroll = rememberScrollState()
    val clipboard = LocalClipboardManager.current
    val ctx = LocalContext.current
    
    // üéØ ÊâãÂäøÂÜ≤Á™ÅËß£ÂÜ≥ÔºöÊ£ÄÊµãÊ∞¥Âπ≥ÊªöÂä®Áä∂ÊÄÅ
    var isScrolling by remember { mutableStateOf(false) }
    LaunchedEffect(hScroll.isScrollInProgress) {
        isScrolling = hScroll.isScrollInProgress
        onScrollingStateChanged(isScrolling)
    }

    Box(
        modifier = modifier
            .fillMaxWidth()
            .heightIn(min = 40.dp, max = maxHeight.dp)
            .pointerInput(enableHorizontalScroll) {
                // üéØ Â¶ÇÊûúÂêØÁî®Ê∞¥Âπ≥ÊªöÂä®ÔºåÊçïËé∑Ê∞¥Âπ≥ÊãñÂä®ÊâãÂäø
                if (enableHorizontalScroll) {
                    detectHorizontalDragGestures(
                        onDragStart = { onScrollingStateChanged(true) },
                        onDragEnd = { onScrollingStateChanged(false) },
                        onDragCancel = { onScrollingStateChanged(false) },
                        onHorizontalDrag = { change, _ ->
                            change.consume() // Ê∂àË¥π‰∫ã‰ª∂ÔºåÈò≤Ê≠¢ÊäΩÂ±âÂìçÂ∫î
                        }
                    )
                }
            }
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .verticalScroll(vScroll)
                .padding(start = 4.dp, end = 4.dp, top = 32.dp, bottom = 4.dp)
        ) {
            SelectionContainer {
                // üéØ Ê†πÊçÆenableHorizontalScrollÂÜ≥ÂÆöÊòØÂê¶ÂèØ‰ª•Ê∞¥Âπ≥ÊªöÂä®
                val contentModifier = if (enableHorizontalScroll) {
                    Modifier.horizontalScroll(hScroll)
                } else {
                    Modifier.fillMaxWidth()
                }
                
                Row(modifier = contentModifier) {
                    Text(
                        text = code,
                        style = MaterialTheme.typography.bodyMedium.copy(
                            fontFamily = FontFamily.Monospace,
                            fontSize = 13.sp,
                            lineHeight = 18.sp,
                            fontWeight = FontWeight.SemiBold,
                            color = codeColor,
                            letterSpacing = 0.sp
                        ),
                        softWrap = !enableHorizontalScroll // üéØ Áü≠‰ª£Á†ÅËá™Âä®Êç¢Ë°å
                    )
                }
            }
        }

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .align(Alignment.TopStart)
                .padding(horizontal = 4.dp, vertical = 4.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            val langText = language?.takeIf { it.isNotBlank() } ?: "code"
            Text(
                text = langText.lowercase(),
                style = MaterialTheme.typography.labelSmall.copy(
                    fontFamily = FontFamily.Monospace,
                    fontSize = 11.sp,
                    fontWeight = FontWeight.Medium,
                    color = topBarColor,
                    letterSpacing = 0.3.sp
                )
            )

            IconButton(
                onClick = {
                    clipboard.setText(AnnotatedString(code))
                    Toast.makeText(ctx, "‰ª£Á†ÅÂ∑≤Â§çÂà∂", Toast.LENGTH_SHORT).show()
                },
                modifier = Modifier.size(32.dp)
            ) {
                Icon(
                    imageVector = Icons.Outlined.ContentCopy,
                    contentDescription = "Â§çÂà∂‰ª£Á†Å",
                    tint = topBarColor,
                    modifier = Modifier.size(16.dp)
                )
            }
        }
    }
}
