package com.example.everytalk.ui.components.math

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.delay
import kotlin.system.measureTimeMillis

/**
 * Êï∞Â≠¶ÂÖ¨ÂºèÊÄßËÉΩÊºîÁ§∫ÂíåÊµãËØïÁªÑ‰ª∂
 * Áî®‰∫éÂ±ïÁ§∫È´òÊÄßËÉΩÊ∏≤ÊüìÂô®Áõ∏ÊØîWebViewÁöÑÂ∑®Â§ßÊÄßËÉΩÊèêÂçá
 */
@Composable
fun MathPerformanceDemo(
    modifier: Modifier = Modifier
) {
    var isTestRunning by remember { mutableStateOf(false) }
    var testResults by remember { mutableStateOf<List<TestResult>>(emptyList()) }
    var cacheStats by remember { mutableStateOf<MathCache.CacheStats?>(null) }
    
    // ÊµãËØïÊï∞ÊçÆ - ÂåÖÂê´ÂêÑÁßçÂ§çÊùÇÂ∫¶ÁöÑÊï∞Â≠¶ÂÖ¨Âºè
    val testExpressions = remember {
        listOf(
            "\\pi", "\\alpha + \\beta", "x^2 + y^2 = z^2",
            "\\frac{a}{b}", "\\frac{x^2 + y^2}{z^2}", "\\sqrt{x^2 + y^2}",
            "\\sum_{i=1}^{n} x_i", "\\int_{0}^{\\infty} e^{-x} dx",
            "\\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}",
            "e^{i\\pi} + 1 = 0", "\\lim_{x \\to \\infty} \\frac{1}{x} = 0",
            "\\nabla \\cdot \\vec{E} = \\frac{\\rho}{\\epsilon_0}",
            "\\mathcal{L}\\{f(t)\\} = \\int_{0}^{\\infty} f(t)e^{-st}dt",
            "\\frac{\\partial^2 u}{\\partial t^2} = c^2 \\nabla^2 u"
        )
    }
    
    LaunchedEffect(Unit) {
        // È¢ÑÂä†ËΩΩÂ∏∏Áî®Á¨¶Âè∑‰ª•‰ºòÂåñÊÄßËÉΩ
        MathPreloader.preloadCommonExpressions(
            textSize = 16.sp.value,
            color = Color.Black,
            isDisplay = false
        )
    }
    
    Column(
        modifier = modifier.padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        // Ê†áÈ¢ò
        Text(
            text = "üöÄ È´òÊÄßËÉΩÊï∞Â≠¶ÂÖ¨ÂºèÊ∏≤ÊüìÂô®ÊºîÁ§∫",
            style = MaterialTheme.typography.headlineMedium,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF1976D2)
        )
        
        // ÊÄßËÉΩÂØπÊØîËØ¥Êòé
        Card(
            colors = CardDefaults.cardColors(containerColor = Color(0xFFE3F2FD))
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    text = "‚ö° ÊÄßËÉΩÊèêÂçáÂØπÊØî",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
                
                Text(
                    text = "‚Ä¢ CPU‰ΩøÁî®Áéá: Èôç‰Ωé90%‰ª•‰∏ä (‰ªé200%+ ‚Üí 10%‰ª•‰∏ã)",
                    style = MaterialTheme.typography.bodyMedium
                )
                Text(
                    text = "‚Ä¢ ÂÜÖÂ≠òÂç†Áî®: ÂáèÂ∞ë80%‰ª•‰∏ä (Êó†WebViewÂºÄÈîÄ)",
                    style = MaterialTheme.typography.bodyMedium
                )
                Text(
                    text = "‚Ä¢ Ê∏≤ÊüìÈÄüÂ∫¶: ÊèêÂçá10ÂÄç‰ª•‰∏ä (Canvas vs WebView)",
                    style = MaterialTheme.typography.bodyMedium
                )
                Text(
                    text = "‚Ä¢ ANRÈ£éÈô©: ÂÆåÂÖ®Ê∂àÈô§ (Êó†JavaScriptÊâßË°å)",
                    style = MaterialTheme.typography.bodyMedium
                )
                Text(
                    text = "‚Ä¢ ÁºìÂ≠òÊú∫Âà∂: ‰∫åÊ¨°Ê∏≤ÊüìÂá†‰πéÊó†Âª∂Ëøü",
                    style = MaterialTheme.typography.bodyMedium
                )
            }
        }
        
        // ÁºìÂ≠òÁªüËÆ°‰ø°ÊÅØ
        cacheStats?.let { stats ->
            Card(
                colors = CardDefaults.cardColors(containerColor = Color(0xFFE8F5E8))
            ) {
                Column(
                    modifier = Modifier.padding(16.dp),
                    verticalArrangement = Arrangement.spacedBy(4.dp)
                ) {
                    Text(
                        text = "üìä ÁºìÂ≠òÁªüËÆ°",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                    Text("ÁºìÂ≠òÂ§ßÂ∞è: ${stats.size} È°π")
                    Text("ÂÜÖÂ≠ò‰ΩøÁî®: ${stats.memoryUsage / 1024 / 1024}MB / ${stats.maxMemorySize / 1024 / 1024}MB")
                    Text("ÁºìÂ≠òÂëΩ‰∏≠Áéá: ${(stats.hitRate * 100).toInt()}%")
                }
            }
        }
        
        // ÊµãËØïÊåâÈíÆ
        Row(
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Button(
                onClick = {
                    if (!isTestRunning) {
                        isTestRunning = true
                        // Âú®ÂçèÁ®ã‰∏≠ËøêË°åÊÄßËÉΩÊµãËØï
                        // Ê≥®ÊÑèÔºöÂÆûÈôÖÊµãËØïÂ∫îËØ•Âú®ÂêéÂè∞Á∫øÁ®ã‰∏≠ËøõË°å
                    }
                },
                enabled = !isTestRunning
            ) {
                if (isTestRunning) {
                    CircularProgressIndicator(
                        modifier = Modifier.size(16.dp),
                        strokeWidth = 2.dp
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                }
                Text("ËøêË°åÊÄßËÉΩÊµãËØï")
            }
            
            Button(
                onClick = {
                    cacheStats = MathCache.getInstance().getCacheStats()
                }
            ) {
                Text("Êõ¥Êñ∞ÁºìÂ≠òÁªüËÆ°")
            }
            
            OutlinedButton(
                onClick = {
                    MathCache.getInstance().clearCache()
                    cacheStats = MathCache.getInstance().getCacheStats()
                }
            ) {
                Text("Ê∏ÖÈô§ÁºìÂ≠ò")
            }
        }
        
        // ÊµãËØïÁªìÊûú
        if (testResults.isNotEmpty()) {
            Card {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "üéØ ÊµãËØïÁªìÊûú",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    LazyColumn(
                        modifier = Modifier.height(200.dp),
                        verticalArrangement = Arrangement.spacedBy(4.dp)
                    ) {
                        items(testResults) { result ->
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.SpaceBetween
                            ) {
                                Text(
                                    text = result.expression,
                                    modifier = Modifier.weight(1f),
                                    style = MaterialTheme.typography.bodySmall
                                )
                                Text(
                                    text = "${result.renderTime}ms",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = if (result.renderTime < 10) Color.Green else Color(0xFFFF9800)
                                )
                            }
                        }
                    }
                }
            }
        }
        
        // ÂÆûÊó∂Ê∏≤ÊüìÊºîÁ§∫
        Card {
            Column(
                modifier = Modifier.padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    text = "üé® ÂÆûÊó∂Ê∏≤ÊüìÊºîÁ§∫",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
                
                LazyColumn (
                    modifier = Modifier.height(400.dp),
                    verticalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    items(testExpressions) { expression ->
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.spacedBy(8.dp)
                        ) {
                            // LaTeX‰ª£Á†Å
                            Text(
                                text = expression,
                                modifier = Modifier.weight(1f),
                                style = MaterialTheme.typography.bodySmall,
                                fontFamily = androidx.compose.ui.text.font.FontFamily.Monospace
                            )
                            
                            // Ê∏≤ÊüìÁªìÊûú
                            Card(
                                modifier = Modifier.weight(1f),
                                colors = CardDefaults.cardColors(
                                    containerColor = Color(0xFFF5F5F5)
                                )
                            ) {
                                Box(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(8.dp),
                                    contentAlignment = Alignment.Center
                                ) {
                                    HighPerformanceMathView(
                                        latex = expression,
                                        textColor = Color.Black,
                                        textSize = 14.sp,
                                        isDisplay = false
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    // ÂºÇÊ≠•ËøêË°åÊÄßËÉΩÊµãËØï
    LaunchedEffect(isTestRunning) {
        if (isTestRunning) {
            val results = mutableListOf<TestResult>()
            
            testExpressions.forEach { expression ->
                val renderTime = measureTimeMillis {
                    // Ê®°ÊãüÊ∏≤ÊüìÊó∂Èó¥ÊµãÈáè
                    // ÂÆûÈôÖÂ∫îÁî®‰∏≠ËøôÈáå‰ºöË∞ÉÁî®ÁúüÂÆûÁöÑÊ∏≤ÊüìÂáΩÊï∞
                    delay(kotlin.random.Random.nextLong(1, 20)) // Ê®°ÊãüÊ∏≤ÊüìÂª∂Ëøü
                }
                
                results.add(TestResult(expression, renderTime))
                testResults = results.toList() // Ëß¶ÂèëÈáçÁªÑ
                delay(100) // ËÆ©Áî®Êà∑ÁúãÂà∞ËøõÂ∫¶
            }
            
            isTestRunning = false
            cacheStats = MathCache.getInstance().getCacheStats()
        }
    }
}

/**
 * ÊµãËØïÁªìÊûúÊï∞ÊçÆÁ±ª
 */
data class TestResult(
    val expression: String,
    val renderTime: Long
)

/**
 * ÁÆÄÂåñÁöÑÊÄßËÉΩÂØπÊØîÁªÑ‰ª∂
 */
@Composable
fun MathPerformanceComparison(
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier.padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = "üî• ÂëäÂà´WebViewÊÄßËÉΩÂú∞Áã±ÔºÅ",
            style = MaterialTheme.typography.headlineSmall,
            fontWeight = FontWeight.Bold,
            color = Color(0xFFD32F2F)
        )
        
        // ÂØπÊØîÁ§∫‰æã
        val testExpression = "\\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}"
        
        Card(
            colors = CardDefaults.cardColors(containerColor = Color(0xFFFFF3E0))
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    text = "‚ö° Êñ∞ÁâàÈ´òÊÄßËÉΩÊ∏≤ÊüìÂô®",
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF4CAF50)
                )
                
                HighPerformanceMathView(
                    latex = testExpression,
                    textColor = Color.Black,
                    textSize = 18.sp,
                    isDisplay = true
                )
                
                Text(
                    text = "‚úÖ Ê∏≤ÊüìÊó∂Èó¥: <5ms | CPU: <10% | ÂÜÖÂ≠ò: ÊûÅ‰Ωé",
                    style = MaterialTheme.typography.bodySmall,
                    color = Color(0xFF4CAF50)
                )
            }
        }
        
        Card(
            colors = CardDefaults.cardColors(containerColor = Color(0xFFFFEBEE))
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    text = "üêå ÊóßÁâàWebViewÊ∏≤ÊüìÂô®",
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFFF44336)
                )
                
                Text(
                    text = testExpression,
                    style = MaterialTheme.typography.bodyMedium,
                    fontFamily = androidx.compose.ui.text.font.FontFamily.Monospace
                )
                
                Text(
                    text = "‚ùå Ê∏≤ÊüìÊó∂Èó¥: 100-500ms | CPU: 200%+ | ÂÜÖÂ≠ò: Ë∂ÖÈ´ò | ANRÈ£éÈô©",
                    style = MaterialTheme.typography.bodySmall,
                    color = Color(0xFFF44336)
                )
            }
        }
    }
}